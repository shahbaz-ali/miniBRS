#   mbrs
#   Copyright (c)Cloud Innovation Partners 2020.
#   http://www.cloudinp.com

from plugins.mbrs.utils.dates import cron_presets
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator, BranchPythonOperator
from plugins.mbrs.utils.servicenow import fetch_servicenow_record_count, on_failure
from datetime import datetime,timedelta
import airflow.settings
from airflow.models import DagModel

{% if data.storage_type == 'sftp' %}
from plugins.mbrs.operators.servicenow_to_sftp_transfer_operator import ServiceNowToSFTPTransferOperator
{% elif data.storage_type == 's3' %}
from plugins.mbrs.operators.servicenow_to_s3_transfer_operator import ServiceNowToS3TransferOperator
{% elif data.storage_type == 'dropbox' %}
from plugins.mbrs.operators.servicenow_to_dropbox_transfer_operator import ServiceNowToDropboxTransferOperator
{% elif data.storage_type == 'googledrive' %}
from plugins.mbrs.operators.servicenow_to_googledrive_transfer_operator import ServiceNowToGoogleDriveTransferOperator
{% elif data.storage_type == 'mysql' %}
from plugins.mbrs.operators.servicenow_to_mysql_transfer_operator import ServiceNowToMYSQLTransferOperator
{% elif data.storage_type == 'mssql' %}
from plugins.mbrs.operators.servicenow_to_mssql_transfer_operator import ServiceNowToMSSQLTransferOperator
{% elif data.storage_type == 'postgres' %}
from plugins.mbrs.operators.servicenow_to_postgres_transfer_operator import ServiceNowToPostgresqlTransferOperator
{% endif %}

{%block dag%}
table_name = {{"'"~data.dag_id~"'"}}


dag = DAG(
dag_id=str({{ "'"~'r_'+data.dag_id|string~"'" }}'_'+{{"'"~data.execution_date~"'"}}).replace(' ','_').replace('.','').replace('-','').replace('+','').replace(':',''),
        schedule_interval={{"'@once'"}},
        catchup=False,
        default_args={
            'owner': 'BRS',
            'depends_on_past': False,
            'start_date': datetime(2020,2,24,0,0),
            'retries': 1,
            'retry_delay': timedelta(minutes=1)
        }

)
start = DummyOperator(task_id='start',dag=dag)
end = DummyOperator(task_id='end',dag=dag)
record_count = BranchPythonOperator(task_id='fetch_record_count',python_callable=fetch_servicenow_record_count,dag=dag,op_kwargs={'table_name': table_name,'execution_date':{{"'"~data.execution_date~"'"}}})
count_less_than_threshold = DummyOperator(task_id='count_within_threshold',dag=dag)
count_exceeds_threshold = DummyOperator(task_id='count_exceeds_threshold',dag=dag)
count_equals_zero = DummyOperator(task_id='count_is_zero',dag=dag)

{% if data.storage_type == 'sftp' %}
submission = ServiceNowToSFTPTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'sftp_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})

{% elif data.storage_type == 's3' %}
submission = ServiceNowToS3TransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 's3_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})

{% elif data.storage_type == 'dropbox' %}
submission = ServiceNowToDropboxTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'dropbox_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})

{% elif data.storage_type == 'googledrive' %}
submission = ServiceNowToGoogleDriveTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'dropbox_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})

{% elif data.storage_type == 'mysql' %}
submission = ServiceNowToMYSQLTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'dropbox_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})

{% elif data.storage_type == 'mssql' %}
submission = ServiceNowToMSSQLTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'dropbox_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})

{% elif data.storage_type == 'postgres' %}
submission = ServiceNowToPostgresqlTransferOperator(task_id='send_data_to_submission',dag=dag,snow_id ='servicenow_default',config = 'config',storage_conn_id = 'dropbox_default',table = table_name,execution_date={{"'"~data.execution_date~"'"}})
{% endif %}

{% endblock %}


start>>record_count>>[count_less_than_threshold,count_exceeds_threshold,count_equals_zero]
count_less_than_threshold >> submission >> end
end <<[count_exceeds_threshold,count_equals_zero,submission]

{% block unpause%}
session = airflow.settings.Session()
try:
    qry = session.query(DagModel).filter(DagModel.dag_id == dag.dag_id)
    d = qry.first()
    d.is_paused = False
    session.commit()
except:
    session.rollback()
finally:
    session.close()
{% endblock %}


